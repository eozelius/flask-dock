{"remainingRequest":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js!/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ethan/vue/minesweeper/src/components/Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ethan/vue/minesweeper/src/components/Board.vue","mtime":1549809042926},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Cell from \"@/components/Cell.vue\";\nexport default {\n  name: \"Minesweeper-Board\",\n  data: function data() {\n    return {\n      title: \"Minesweeper\",\n      board: [],\n      rows: 4,\n      cols: 4,\n      newMines: 5,\n      mines: 5,\n      safeCells: 2,\n      errors: []\n    };\n  },\n  mounted: function mounted() {\n    this.generateBoard(this.rows, this.cols, this.mines);\n  },\n  methods: {\n    randomNum: function randomNum(max) {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n    generateBoard: function generateBoard() {\n      var _this = this;\n\n      var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rows;\n      var cols = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.cols;\n      var mines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.mines;\n\n      if (!this.validGame(rows, cols, mines)) {\n        return;\n      } // calculate number of cells that are not mines.\n\n\n      this.safeCells = rows * cols - mines;\n      this.mines = mines; // Helper function to return a list of cells that do not have a mine place in them.\n\n      var getAvailableCells = function getAvailableCells() {\n        var availableCells = [];\n\n        for (var i = 0; i < rows; i++) {\n          for (var j = 0; j < cols; j++) {\n            if (!_this.board[i][j].mine) {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n\n        return availableCells;\n      }; // Initialize board to entirely empty but active cells\n\n\n      for (var r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n\n        for (var c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            mine: false,\n            active: true,\n            borderMines: 0,\n            flag: false\n          });\n        }\n      } // Place mines\n\n\n      for (var m = 0; m < mines; m++) {\n        var availableCells = getAvailableCells();\n        var randomNum = this.randomNum(availableCells.length);\n        var cell = availableCells[randomNum];\n        var row = cell[0];\n        var col = cell[1];\n        this.$set(this.board[row][col], \"mine\", true);\n      } // Determine Border Mines\n\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < cols; j++) {\n          if (!this.board[i][j].mine) {\n            continue;\n          } // North\n\n\n          if (i - 1 >= 0) {\n            var neighbor = this.board[i - 1][j];\n\n            var _mines = neighbor.borderMines + 1;\n\n            this.$set(neighbor, \"borderMines\", _mines);\n          } // NorthEast\n\n\n          if (i - 1 >= 0 && j + 1 < cols) {\n            var _neighbor = this.board[i - 1][j + 1];\n\n            var _mines2 = _neighbor.borderMines + 1;\n\n            this.$set(_neighbor, \"borderMines\", _mines2);\n          } // East\n\n\n          if (j + 1 < cols) {\n            var _neighbor2 = this.board[i][j + 1];\n\n            var _mines3 = _neighbor2.borderMines + 1;\n\n            this.$set(_neighbor2, \"borderMines\", _mines3);\n          } // SouthEast\n\n\n          if (i + 1 < rows && j + 1 < cols) {\n            var _neighbor3 = this.board[i + 1][j + 1];\n\n            var _mines4 = _neighbor3.borderMines + 1;\n\n            this.$set(_neighbor3, \"borderMines\", _mines4);\n          } // South\n\n\n          if (i + 1 < rows) {\n            var _neighbor4 = this.board[i + 1][j];\n\n            var _mines5 = _neighbor4.borderMines + 1;\n\n            this.$set(_neighbor4, \"borderMines\", _mines5);\n          } // SouthWest\n\n\n          if (i + 1 < rows && j - 1 >= 0) {\n            var _neighbor5 = this.board[i + 1][j - 1];\n\n            var _mines6 = _neighbor5.borderMines + 1;\n\n            this.$set(_neighbor5, \"borderMines\", _mines6);\n          } // West\n\n\n          if (j - 1 >= 0) {\n            var _neighbor6 = this.board[i][j - 1];\n\n            var _mines7 = _neighbor6.borderMines + 1;\n\n            this.$set(_neighbor6, \"borderMines\", _mines7);\n          } // NorthWest\n\n\n          if (i - 1 >= 0 && j - 1 >= 0) {\n            var _neighbor7 = this.board[i - 1][j - 1];\n\n            var _mines8 = _neighbor7.borderMines + 1;\n\n            this.$set(_neighbor7, \"borderMines\", _mines8);\n          }\n        }\n      }\n    },\n    handleFlagClick: function handleFlagClick(row, col) {\n      // Removing Flag\n      if (this.board[row][col].flag) {\n        this.$set(this.board[row][col], \"flag\", false);\n        this.$set(this.board[row][col], \"active\", true);\n        this.mines++;\n        return;\n      } // Replace a number with a flag\n\n\n      if (!this.board[row][col].active) {\n        this.$set(this.board[row][col], \"flag\", true);\n        this.mines--;\n        this.safeCells++;\n        return;\n      }\n\n      this.$set(this.board[row][col], \"flag\", true);\n      this.$set(this.board[row][col], \"active\", false);\n      this.mines--;\n      this.gameWon();\n    },\n    handleClick: function handleClick(row, col, flag) {\n      if (flag) {\n        this.handleFlagClick(row, col);\n        return;\n      } // this cell has already been clicked\n\n\n      if (!this.board[row][col].active) {\n        return false;\n      } // Set Cell to Inactive\n\n\n      this.$set(this.board[row][col], \"active\", false);\n      this.safeCells--; // Triggered a mine\n\n      if (this.board[row][col].mine) {\n        alert(\"you lose!!\");\n        this.resetGame();\n        return;\n      }\n\n      this.gameWon();\n    },\n    resetGame: function resetGame() {\n      if (!this.validGame(this.rows, this.cols, this.newMines)) {\n        return;\n      }\n\n      this.board = [];\n      this.generateBoard(this.rows, this.cols, this.newMines);\n    },\n    validGame: function validGame(rows, cols, mines) {\n      this.errors = [];\n\n      if (mines >= rows * cols) {\n        this.errors.push(\"Error: Mines cannot outnumber Cells.\");\n      }\n\n      if (rows <= 0) {\n        this.errors.push(\"Error: Rows must be greater than zero.\");\n      }\n\n      if (cols <= 0) {\n        this.errors.push(\"Error: Columns must be greater than zero.\");\n      }\n\n      return this.errors.length === 0 ? true : false;\n    },\n    gameWon: function gameWon() {\n      if (this.safeCells === 0 && this.allMinesFlagged()) {\n        setTimeout(function () {\n          return alert(\"you win\");\n        });\n      }\n    },\n    allMinesFlagged: function allMinesFlagged() {\n      for (var r = 0; r < this.rows; r++) {\n        for (var c = 0; c < this.cols; c++) {\n          if (this.board[r][c].mine && !this.board[r][c].flag) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  },\n  components: {\n    Cell: Cell\n  }\n};",{"version":3,"sources":["Board.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"board-container\">\n    <div class=\"details-container\">\n      <div class=\"mines-remaining\">\n        <h3>Mines Remaining: {{ mines }}</h3>\n        <h3>Safe Cells: {{ safeCells }}</h3>\n      </div>\n\n      <div class=\"reset-container\">\n        <div class=\"errors-container\">\n          <ul class=\"errors\">\n            <li v-for=\"(error, i) in errors\" :key=\"i\">{{ error }}</li>\n          </ul>\n        </div>\n\n        <!-- Rows -->\n        <label for=\"rows\">Rows</label>\n        <input v-model=\"rows\" name=\"cols\" type=\"text\" />\n\n        <!-- Columns -->\n        <label for=\"cols\">Columns</label>\n        <input v-model=\"cols\" name=\"rows\" type=\"text\" />\n\n        <!-- Mines -->\n        <label for=\"mines\">Mines</label>\n        <input v-model=\"newMines\" name=\"mines\" type=\"text\" />\n\n        <button @click=\"resetGame\">Reset</button>\n      </div>\n    </div>\n\n    <div class=\"gameplay-container\">\n      <h1>{{ title }}</h1>\n      <div class=\"row\" v-for=\"(row, i) in board\" :key=\"i\">\n        <div class=\"col\" v-for=\"(col, j) in row\" :key=\"j\">\n          <Cell\n            :mine=\"col.mine\"\n            :flag=\"col.flag\"\n            :active=\"col.active\"\n            :row=\"i\"\n            :col=\"j\"\n            :border-mines=\"col.borderMines\"\n            v-on:cell-clicked=\"handleClick\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cell from \"@/components/Cell.vue\";\n\nexport default {\n  name: \"Minesweeper-Board\",\n  data: () => {\n    return {\n      title: \"Minesweeper\",\n      board: [],\n      rows: 4,\n      cols: 4,\n      newMines: 5,\n      mines: 5,\n      safeCells: 2,\n      errors: []\n    };\n  },\n\n  mounted() {\n    this.generateBoard(this.rows, this.cols, this.mines);\n  },\n\n  methods: {\n    randomNum: max => {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n\n    generateBoard(rows = this.rows, cols = this.cols, mines = this.mines) {\n      if (!this.validGame(rows, cols, mines)) {\n        return;\n      }\n\n      // calculate number of cells that are not mines.\n      this.safeCells = rows * cols - mines;\n      this.mines = mines;\n\n      // Helper function to return a list of cells that do not have a mine place in them.\n      const getAvailableCells = () => {\n        const availableCells = [];\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            if (!this.board[i][j].mine) {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n        return availableCells;\n      };\n\n      // Initialize board to entirely empty but active cells\n      for (let r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n        for (let c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            mine: false,\n            active: true,\n            borderMines: 0,\n            flag: false\n          });\n        }\n      }\n\n      // Place mines\n      for (let m = 0; m < mines; m++) {\n        const availableCells = getAvailableCells();\n        const randomNum = this.randomNum(availableCells.length);\n        const cell = availableCells[randomNum];\n        const row = cell[0];\n        const col = cell[1];\n        this.$set(this.board[row][col], \"mine\", true);\n      }\n\n      // Determine Border Mines\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n          if (!this.board[i][j].mine) {\n            continue;\n          }\n\n          // North\n          if (i - 1 >= 0) {\n            const neighbor = this.board[i - 1][j];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // NorthEast\n          if (i - 1 >= 0 && j + 1 < cols) {\n            const neighbor = this.board[i - 1][j + 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // East\n          if (j + 1 < cols) {\n            const neighbor = this.board[i][j + 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // SouthEast\n          if (i + 1 < rows && j + 1 < cols) {\n            const neighbor = this.board[i + 1][j + 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // South\n          if (i + 1 < rows) {\n            const neighbor = this.board[i + 1][j];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // SouthWest\n          if (i + 1 < rows && j - 1 >= 0) {\n            const neighbor = this.board[i + 1][j - 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // West\n          if (j - 1 >= 0) {\n            const neighbor = this.board[i][j - 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // NorthWest\n          if (i - 1 >= 0 && j - 1 >= 0) {\n            const neighbor = this.board[i - 1][j - 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n        }\n      }\n    },\n\n    handleFlagClick(row, col) {\n      // Removing Flag\n      if (this.board[row][col].flag) {\n        this.$set(this.board[row][col], \"flag\", false);\n        this.$set(this.board[row][col], \"active\", true);\n        this.mines++;\n        return;\n      }\n\n      // Replace a number with a flag\n      if (!this.board[row][col].active) {\n        this.$set(this.board[row][col], \"flag\", true);\n        this.mines--;\n        this.safeCells++;\n        return;\n      }\n\n      this.$set(this.board[row][col], \"flag\", true);\n      this.$set(this.board[row][col], \"active\", false);\n      this.mines--;\n      this.gameWon();\n    },\n\n    handleClick(row, col, flag) {\n      if (flag) {\n        this.handleFlagClick(row, col);\n        return;\n      }\n\n      // this cell has already been clicked\n      if (!this.board[row][col].active) {\n        return false;\n      }\n\n      // Set Cell to Inactive\n      this.$set(this.board[row][col], \"active\", false);\n      this.safeCells--;\n\n      // Triggered a mine\n      if (this.board[row][col].mine) {\n        alert(\"you lose!!\");\n        this.resetGame();\n        return;\n      }\n\n      this.gameWon();\n    },\n\n    resetGame() {\n      if (!this.validGame(this.rows, this.cols, this.newMines)) {\n        return;\n      }\n      this.board = [];\n      this.generateBoard(this.rows, this.cols, this.newMines);\n    },\n\n    validGame(rows, cols, mines) {\n      this.errors = [];\n\n      if (mines >= rows * cols) {\n        this.errors.push(\"Error: Mines cannot outnumber Cells.\");\n      }\n\n      if (rows <= 0) {\n        this.errors.push(\"Error: Rows must be greater than zero.\");\n      }\n\n      if (cols <= 0) {\n        this.errors.push(\"Error: Columns must be greater than zero.\");\n      }\n\n      return this.errors.length === 0 ? true : false;\n    },\n\n    gameWon() {\n      if (this.safeCells === 0 && this.allMinesFlagged()) {\n        setTimeout(() => alert(\"you win\"));\n      }\n    },\n\n    allMinesFlagged() {      \n      for (let r = 0; r < this.rows; r++) {\n        for (let c = 0; c < this.cols; c++) {\n          if (this.board[r][c].mine && !this.board[r][c].flag) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  },\n\n  components: {\n    Cell\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.board-container {\n  width: 75%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.details-container {\n  width: 24%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.gameplay-container {\n  width: 74%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.reset-container {\n  padding: 0 0 5%;\n\n  label {\n    display: block;\n    font-size: 18px;\n  }\n\n  input[type=\"text\"] {\n    width: 50%;\n    height: 25px;\n    margin: 1% auto 5%;\n    display: block;\n    padding: 1% 2%;\n    font-size: 15px;\n  }\n\n  button {\n    margin: 10% auto 5%;\n    width: 150px;\n    height: 30px;\n    background-color: aliceblue;\n    border-radius: 3px;\n    cursor: pointer;\n    font-size: 15px;\n    line-height: 15px;\n  }\n\n  .errors-container {\n    ul {\n      list-style-type: none;\n    }\n\n    li {\n      text-align: left;\n      color: maroon;\n      font-weight: 400;\n      margin-bottom: 10px;\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}