{"remainingRequest":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js!/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ethan/vue/minesweeper/src/components/Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ethan/vue/minesweeper/src/components/Board.vue","mtime":1549672995836},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Cell from \"@/components/Cell.vue\";\nexport default {\n  name: \"Board\",\n  data: function data() {\n    return {\n      title: \"Minesweeper\",\n      board: [],\n      rows: 5,\n      cols: 5,\n      mines: 5,\n      safeCells: 20\n    };\n  },\n  mounted: function mounted() {\n    this.generateBoard(this.rows, this.cols, this.mines);\n  },\n  methods: {\n    randomNum: function randomNum(max) {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n    generateBoard: function generateBoard() {\n      var _this = this;\n\n      var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rows;\n      var cols = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.cols;\n      var mines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.mines;\n\n      if (!this.validGame()) {\n        return;\n      }\n\n      this.safeCells = rows * cols - mines;\n\n      var getAvailableCells = function getAvailableCells() {\n        var availableCells = [];\n\n        for (var i = 0; i < rows; i++) {\n          for (var j = 0; j < cols; j++) {\n            if (_this.board[i][j].value === \"_\") {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n\n        return availableCells;\n      }; // Initialize board to entirely empty but active cells\n\n\n      for (var r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n\n        for (var c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            value: \"_\",\n            active: true\n          });\n        }\n      } // Place mines\n\n\n      for (var m = 0; m < mines; m++) {\n        var availableCells = getAvailableCells();\n        var randomNum = this.randomNum(availableCells.length);\n        var cell = availableCells[randomNum];\n        var row = cell[0];\n        var col = cell[1];\n        this.$set(this.board[row][col], \"value\", \"x\");\n      }\n    },\n    handleClick: function handleClick(row, col) {\n      // this cell has already been clicked\n      if (this.board[row][col].active === false) {\n        return false;\n      } else {\n        this.$set(this.board[row][col], \"active\", false);\n      } // Triggered a mine\n\n\n      if (this.board[row][col].value === 'x') {\n        alert('you lose!!');\n        this.resetGame();\n      } else {\n        this.safeCells--;\n      } // Game won?\n\n\n      if (this.safeCells === 0) {\n        alert('you will!!');\n        this.resetGame();\n      }\n    },\n    isGameActive: function isGameActive() {\n      if (this.safeCells === 0) {\n        alert('you will!!');\n        this.resetGame();\n      }\n    },\n    resetGame: function resetGame() {\n      if (!this.validGame()) {\n        return;\n      }\n\n      this.board = [];\n      this.generateBoard(this.rows, this.col, this.mines);\n    },\n    validGame: function validGame() {\n      var errors = [];\n\n      if (this.mines >= this.rows * this.cols) {\n        errors.push('Error: Mines cannot outnumber Cells.');\n      }\n\n      if (this.rows <= 0) {\n        errors.push('Error: Rows must be greater than zero.');\n      }\n\n      if (this.cols <= 0) {\n        errors.push('Error: Columns must be greater than zero.');\n      }\n\n      if (errors.length === 0) {\n        return true;\n      } else {\n        errors.forEach(function (e) {\n          console.error(e);\n        });\n        return false;\n      }\n    }\n  },\n  components: {\n    Cell: Cell\n  }\n};",{"version":3,"sources":["Board.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"board-container\">\n    <h1>{{ title }}</h1>\n    <div class=\"details-container\">\n      <div class=\"mines-remaining\">\n        <h3>Mines Remaining: {{ mines }}</h3>\n      </div>\n\n      <div class=\"reset-container\">\n        <!-- Rows -->\n        <label for=\"rows\">Rows</label>\n        <input v-model=\"rows\" name=\"cols\" type=\"text\" />\n\n        <!-- Columns -->\n        <label for=\"cols\">Columns</label>\n        <input v-model=\"cols\" name=\"rows\" type=\"text\" />\n\n        <!-- Mines -->\n        <label for=\"mines\">Mines</label>\n        <input v-model=\"mines\" name=\"mines\" type=\"text\" />\n\n        <button @click=\"resetGame\">Reset</button>\n      </div>\n    </div>\n\n    <div class=\"gameplay-container\">\n      <div class=\"row\" v-for=\"(row, i) in board\" :key=\"i\">\n        <div class=\"col\" v-for=\"(col, j) in row\" :key=\"j\">\n          <Cell\n            :value=\"col.value\"\n            :active=\"col.active\"\n            :row=\"i\"\n            :col=\"j\"\n            v-on:cell-clicked=\"handleClick\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cell from \"@/components/Cell.vue\";\n\nexport default {\n  name: \"Board\",\n  data: () => {\n    return {\n      title: \"Minesweeper\",\n      board: [],\n      rows: 5,\n      cols: 5,\n      mines: 5,\n      safeCells: 20,\n    };\n  },\n\n  mounted() {\n    this.generateBoard(this.rows, this.cols, this.mines);\n  },\n\n  methods: {\n    randomNum: max => {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n\n    generateBoard(rows = this.rows, cols = this.cols, mines = this.mines) {\n      if(!this.validGame()){ return }\n\n      this.safeCells = rows * cols - mines;\n      \n      const getAvailableCells = () => {\n        const availableCells = [];\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            if (this.board[i][j].value === \"_\") {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n        return availableCells;\n      };\n\n      // Initialize board to entirely empty but active cells\n      for (let r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n        for (let c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            value: \"_\",\n            active: true\n          });\n        }\n      }\n\n      // Place mines\n      for (let m = 0; m < mines; m++) {\n        const availableCells = getAvailableCells();\n        const randomNum = this.randomNum(availableCells.length);\n        const cell = availableCells[randomNum];\n        const row = cell[0];\n        const col = cell[1];\n        this.$set(this.board[row][col], \"value\", \"x\");\n      }\n    },\n\n    handleClick(row, col) {\n      // this cell has already been clicked\n      if(this.board[row][col].active === false) {\n        return false;\n      } else {\n        this.$set(this.board[row][col], \"active\", false);\n      }\n      \n      // Triggered a mine\n      if(this.board[row][col].value === 'x') {\n        alert('you lose!!')\n        this.resetGame()\n      } else {\n        this.safeCells--;\n      }\n\n      // Game won?\n      if(this.safeCells === 0) {\n        alert('you will!!')\n        this.resetGame()\n      }\n\n    },\n\n    isGameActive() {\n      if(this.safeCells === 0) {\n        alert('you will!!')\n        this.resetGame()\n      }\n    },\n\n    resetGame() {\n      if(!this.validGame()){ return }\n      this.board = [];\n      this.generateBoard(this.rows, this.col, this.mines);\n    },\n\n    validGame() {\n      let errors = [];\n\n      if(this.mines >= this.rows * this.cols){\n        errors.push('Error: Mines cannot outnumber Cells.')\n      }\n\n      if(this.rows <= 0){\n        errors.push('Error: Rows must be greater than zero.')\n      }\n\n      if(this.cols <= 0){\n        errors.push('Error: Columns must be greater than zero.')\n      }\n\n      if(errors.length === 0){\n        return true;\n      } else {\n        errors.forEach(e => {\n          console.error(e)\n        })\n        return false\n      }\n    }\n  },\n\n  components: {\n    Cell\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.board-container {\n  width: 75%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.details-container {\n  width: 24%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.gameplay-container {\n  width: 74%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.row {\n  display: flex;\n}\n\n.col {\n  flex-grow: 1;\n}\n\n.reset-container {\n  padding: 0 0 5%;\n\n  label {\n    display: block;\n    font-size: 18px;\n  }\n\n  input[type=\"text\"] {\n    width: 50%;\n    height: 25px;\n    margin: 1% auto 5%;\n    display: block;\n    padding: 1% 2%;\n    font-size: 15px;\n  }\n\n  button {\n    margin: 10% auto 5%;\n    width: 150px;\n    height: 30px;\n    background-color: aliceblue;\n    border-radius: 3px;\n    cursor: pointer;\n    font-size: 15px;\n    line-height: 15px;\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}