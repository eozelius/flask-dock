{"remainingRequest":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js!/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ethan/vue/minesweeper/src/components/Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ethan/vue/minesweeper/src/components/Board.vue","mtime":1549576532665},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Cell from \"@/components/Cell.vue\";\nexport default {\n  name: \"Board\",\n  data: function data() {\n    return {\n      title: \"Minesweeper\",\n      board: []\n    };\n  },\n  mounted: function mounted() {\n    this.generateBoard(6, 6, 5);\n  },\n  methods: {\n    randomNum: function randomNum(max) {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n    generateBoard: function generateBoard(rows, cols, mines) {\n      var _this = this;\n\n      var getAvailableCells = function getAvailableCells() {\n        var availableCells = [];\n\n        for (var i = 0; i < rows; i++) {\n          for (var j = 0; j < cols; j++) {\n            if (_this.board[i][j].value === \"_\") {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n\n        return availableCells;\n      }; // Initialize board to entirely empty but active cells\n\n\n      for (var r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n\n        for (var c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            value: \"_\",\n            active: true\n          });\n        }\n      } // Place mines\n\n\n      for (var m = 0; m < mines; m++) {\n        var availableCells = getAvailableCells();\n        var randomNum = this.randomNum(availableCells.length);\n        var cell = availableCells[randomNum];\n        var row = cell[0];\n        var col = cell[1];\n        this.$set(this.board[row][col], \"value\", \"x\");\n      }\n    },\n    handleClick: function handleClick(row, col) {\n      this.$set(this.board[row][col], \"active\", false);\n    }\n  },\n  components: {\n    Cell: Cell\n  }\n};",{"version":3,"sources":["Board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAkBA,OAAA,IAAA,MAAA,uBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,OADA;AAEA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,aADA;AAEA,MAAA,KAAA,EAAA;AAFA,KAAA;AAIA,GAPA;AASA,EAAA,OATA,qBASA;AACA,SAAA,aAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AACA,GAXA;AAaA,EAAA,OAAA,EAAA;AACA,IAAA,SAAA,EAAA,mBAAA,GAAA,EAAA;AACA;AACA,aAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,KAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA;AACA,KAJA;AAMA,IAAA,aANA,yBAMA,IANA,EAMA,IANA,EAMA,KANA,EAMA;AAAA;;AACA,UAAA,iBAAA,GAAA,SAAA,iBAAA,GAAA;AACA,YAAA,cAAA,GAAA,EAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,EAAA,EAAA;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,EAAA,EAAA;AACA,gBAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,KAAA,GAAA,EAAA;AACA,cAAA,cAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA;AACA;;AACA,eAAA,cAAA;AACA,OAVA,CADA,CAaA;;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,EAAA,EAAA;AACA,aAAA,IAAA,CAAA,KAAA,KAAA,EAAA,CAAA,EAAA,EAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,EAAA,CAAA,EAAA,EAAA;AACA,eAAA,IAAA,CAAA,KAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,YAAA,KAAA,EAAA,GADA;AAEA,YAAA,MAAA,EAAA;AAFA,WAAA;AAIA;AACA,OAtBA,CAwBA;;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,cAAA,GAAA,iBAAA,EAAA;AACA,YAAA,SAAA,GAAA,KAAA,SAAA,CAAA,cAAA,CAAA,MAAA,CAAA;AACA,YAAA,IAAA,GAAA,cAAA,CAAA,SAAA,CAAA;AACA,YAAA,GAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AACA,YAAA,GAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AACA,aAAA,IAAA,CAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,CAAA,EAAA,OAAA,EAAA,GAAA;AACA;AACA,KAvCA;AAyCA,IAAA,WAzCA,uBAyCA,GAzCA,EAyCA,GAzCA,EAyCA;AACA,WAAA,IAAA,CAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,CAAA,EAAA,QAAA,EAAA,KAAA;AACA;AA3CA,GAbA;AA2DA,EAAA,UAAA,EAAA;AACA,IAAA,IAAA,EAAA;AADA;AA3DA,CAAA","sourcesContent":["<template>\n  <div class=\"board-container\">\n    <h1>{{ title }}</h1>\n    <div class=\"row\" v-for=\"(row, i) in board\" :key=\"i\">\n      <div class=\"col\" v-for=\"(col, j) in row\" :key=\"j\">\n        <Cell\n          :value=\"col.value\"\n          :active=\"col.active\"\n          :row=\"i\"\n          :col=\"j\"\n          v-on:cell-clicked=\"handleClick\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cell from \"@/components/Cell.vue\";\n\nexport default {\n  name: \"Board\",\n  data: () => {\n    return {\n      title: \"Minesweeper\",\n      board: []\n    };\n  },\n\n  mounted() {\n    this.generateBoard(6, 6, 5);\n  },\n\n  methods: {\n    randomNum: max => {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n\n    generateBoard(rows, cols, mines) {\n      const getAvailableCells = () => {\n        const availableCells = [];\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            if (this.board[i][j].value === \"_\") {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n        return availableCells;\n      };\n\n      // Initialize board to entirely empty but active cells\n      for (let r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n        for (let c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            value: \"_\",\n            active: true\n          });\n        }\n      }\n\n      // Place mines\n      for (let m = 0; m < mines; m++) {\n        const availableCells = getAvailableCells();\n        const randomNum = this.randomNum(availableCells.length);\n        const cell = availableCells[randomNum];\n        const row = cell[0];\n        const col = cell[1];\n        this.$set(this.board[row][col], \"value\", \"x\");\n      }\n    },\n\n    handleClick(row, col) {\n      this.$set(this.board[row][col], \"active\", false);\n    }\n  },\n\n  components: {\n    Cell\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.board-container {\n  width: 50%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.row {\n  display: flex;\n}\n\n.col {\n  flex-grow: 1;\n}\n</style>\n"],"sourceRoot":"src/components"}]}