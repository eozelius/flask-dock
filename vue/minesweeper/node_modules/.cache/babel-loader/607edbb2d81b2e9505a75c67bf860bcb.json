{"remainingRequest":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js!/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ethan/vue/minesweeper/src/components/Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ethan/vue/minesweeper/src/components/Board.vue","mtime":1550078017111},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\nimport _Promise from \"/Users/ethan/vue/minesweeper/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport _Date$now from \"/Users/ethan/vue/minesweeper/node_modules/@babel/runtime-corejs2/core-js/date/now\";\nimport _parseInt from \"/Users/ethan/vue/minesweeper/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Cell from \"@/components/Cell.vue\";\nimport { clearInterval, setInterval } from \"timers\";\nexport default {\n  name: \"Minesweeper-Board\",\n  data: function data() {\n    return {\n      board: [],\n      rows: 4,\n      cols: 4,\n      mines: 5,\n      resetRows: 4,\n      resetCols: 4,\n      resetMines: 5,\n      safeCells: 2,\n      startTime: 0,\n      elapsedTime: 0,\n      timerInterval: null,\n      gameActive: false,\n      errors: [],\n      highScores: [],\n      showHighScoresModal: false,\n      newHighScoreName: \"\",\n      youLost: false\n    };\n  },\n  mounted: function mounted() {\n    this.generateBoard(this.rows, this.cols, this.mines);\n  },\n  watch: {\n    resetRows: function resetRows(newRows) {\n      if (this.validGame(newRows, this.resetCols, this.resetMines)) {\n        this.resetRows = _parseInt(newRows);\n      }\n    },\n    resetCols: function resetCols(newCols) {\n      if (this.validGame(this.resetRows, newCols, this.resetMines)) {\n        this.resetCols = _parseInt(newCols);\n      }\n    },\n    resetMines: function resetMines(newMines) {\n      if (this.validGame(this.resetRows, this.resetCols, newMines)) {\n        this.resetMines = _parseInt(newMines);\n      }\n    }\n  },\n  methods: {\n    randomNum: function randomNum(max) {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n    generateBoard: function generateBoard() {\n      var _this = this;\n\n      var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.rows;\n      var cols = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.cols;\n      var mines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.mines;\n\n      if (!this.validGame(rows, cols, mines)) {\n        return false;\n      }\n\n      this.rows = rows;\n      this.cols = cols;\n      this.mines = mines; // calculate number of cells that are not mines.\n\n      this.safeCells = rows * cols - mines; // Helper function to return a list of cells that do not have a mine place in them.\n\n      var getAvailableCells = function getAvailableCells() {\n        var availableCells = [];\n\n        for (var i = 0; i < rows; i++) {\n          for (var j = 0; j < cols; j++) {\n            if (!_this.board[i][j].mine) {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n\n        return availableCells;\n      }; // Initialize board to entirely empty but active cells\n\n\n      for (var r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n\n        for (var c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            mine: false,\n            active: true,\n            borderMines: 0,\n            flag: false,\n            reveal: false\n          });\n        }\n      } // Place mines\n\n\n      for (var m = 0; m < mines; m++) {\n        var availableCells = getAvailableCells();\n        var randomNum = this.randomNum(availableCells.length);\n        var cell = availableCells[randomNum];\n        var row = cell[0];\n        var col = cell[1];\n        this.$set(this.board[row][col], \"mine\", true);\n      } // Determine Border Mines\n\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < cols; j++) {\n          if (!this.board[i][j].mine) {\n            continue;\n          } // North\n\n\n          if (i - 1 >= 0) {\n            var neighbor = this.board[i - 1][j];\n\n            var _mines = neighbor.borderMines + 1;\n\n            this.$set(neighbor, \"borderMines\", _mines);\n          } // NorthEast\n\n\n          if (i - 1 >= 0 && j + 1 < cols) {\n            var _neighbor = this.board[i - 1][j + 1];\n\n            var _mines2 = _neighbor.borderMines + 1;\n\n            this.$set(_neighbor, \"borderMines\", _mines2);\n          } // East\n\n\n          if (j + 1 < cols) {\n            var _neighbor2 = this.board[i][j + 1];\n\n            var _mines3 = _neighbor2.borderMines + 1;\n\n            this.$set(_neighbor2, \"borderMines\", _mines3);\n          } // SouthEast\n\n\n          if (i + 1 < rows && j + 1 < cols) {\n            var _neighbor3 = this.board[i + 1][j + 1];\n\n            var _mines4 = _neighbor3.borderMines + 1;\n\n            this.$set(_neighbor3, \"borderMines\", _mines4);\n          } // South\n\n\n          if (i + 1 < rows) {\n            var _neighbor4 = this.board[i + 1][j];\n\n            var _mines5 = _neighbor4.borderMines + 1;\n\n            this.$set(_neighbor4, \"borderMines\", _mines5);\n          } // SouthWest\n\n\n          if (i + 1 < rows && j - 1 >= 0) {\n            var _neighbor5 = this.board[i + 1][j - 1];\n\n            var _mines6 = _neighbor5.borderMines + 1;\n\n            this.$set(_neighbor5, \"borderMines\", _mines6);\n          } // West\n\n\n          if (j - 1 >= 0) {\n            var _neighbor6 = this.board[i][j - 1];\n\n            var _mines7 = _neighbor6.borderMines + 1;\n\n            this.$set(_neighbor6, \"borderMines\", _mines7);\n          } // NorthWest\n\n\n          if (i - 1 >= 0 && j - 1 >= 0) {\n            var _neighbor7 = this.board[i - 1][j - 1];\n\n            var _mines8 = _neighbor7.borderMines + 1;\n\n            this.$set(_neighbor7, \"borderMines\", _mines8);\n          }\n        }\n      }\n    },\n    handleFlagClick: function handleFlagClick(row, col) {\n      // Removing Flag\n      if (this.board[row][col].flag) {\n        this.$set(this.board[row][col], \"flag\", false);\n        this.$set(this.board[row][col], \"active\", true);\n        this.mines++;\n        return;\n      } // Replace a number with a flag\n\n\n      if (!this.board[row][col].active) {\n        this.$set(this.board[row][col], \"flag\", true);\n        this.mines--;\n        this.safeCells++;\n        return;\n      }\n\n      this.$set(this.board[row][col], \"flag\", true);\n      this.$set(this.board[row][col], \"active\", false);\n      this.mines--;\n      this.gameWon();\n    },\n    handleClick: function handleClick(row, col, flag) {\n      console.log(\"RealDeal handleClick () => \"); // First Click\n\n      if (this.allCellsActive()) {\n        console.log('realDeal firstClick!!!');\n        this.startGame();\n      }\n\n      if (flag) {\n        this.handleFlagClick(row, col);\n        return;\n      } // this cell has already been clicked\n\n\n      if (!this.board[row][col].active) {\n        return false;\n      } // Set Cell to Inactive\n\n\n      this.$set(this.board[row][col], \"active\", false);\n      this.safeCells--; // Triggered a mine\n\n      if (this.board[row][col].mine) {\n        this.youLost = true;\n        this.gameActive = false;\n        this.revealMines();\n        this.pauseTimer();\n        return;\n      }\n\n      this.gameWon();\n    },\n    startGame: function startGame() {\n      console.log(\"real Deal!! startGame\");\n      this.gameActive = true;\n      this.youLost = false;\n      this.startTimer();\n    },\n    startTimer: function startTimer() {\n      var _this2 = this;\n\n      console.log('Real Deal Start timer');\n      this.startTime = _Date$now();\n      this.timerInterval = setInterval(function () {\n        console.log('>>> SetInterval');\n        var elapsed = new Date(_Date$now() - _this2.startTime);\n        _this2.elapsedTime = elapsed.getSeconds();\n        console.log(\"elapsedTime => \" + _this2.elapsedTime);\n      }, 1000);\n      return new _Promise(function () {\n        setTimeout(function () {\n          _Promise.resolve();\n        }, 1000);\n      });\n    },\n    pauseTimer: function pauseTimer() {\n      clearInterval(this.timerInterval);\n    },\n    resetTimer: function resetTimer() {\n      this.startTime = 0;\n      this.elapsedTime = 0;\n      clearInterval(this.timerInterval);\n      this.startTimer();\n    },\n    resetGame: function resetGame() {\n      if (!this.validGame(this.resetRows, this.resetCols, this.resetMines)) {\n        return;\n      }\n\n      this.youLost = false;\n      this.elapsedTime = 0;\n      this.board = [];\n      this.generateBoard(this.resetRows, this.resetCols, this.resetMines);\n    },\n    validGame: function validGame(rows, cols, mines) {\n      this.errors = [];\n\n      if (isNaN(rows)) {\n        this.errors.push(\"Rows is not a number.\");\n      }\n\n      if (isNaN(cols)) {\n        this.errors.push(\"Columns is not a number.\");\n      }\n\n      if (isNaN(mines)) {\n        this.errors.push(\"Mines is not a number.\");\n      }\n\n      if (mines >= rows * cols) {\n        this.errors.push(\"Mines cannot outnumber Cells.\");\n      }\n\n      if (mines <= 0) {\n        this.errors.push(\"Mines must be greater than zero.\");\n      }\n\n      if (rows <= 0) {\n        this.errors.push(\"Rows must be greater than zero.\");\n      }\n\n      if (cols <= 0) {\n        this.errors.push(\"Columns must be greater than zero.\");\n      }\n\n      return this.errors.length === 0 ? true : false;\n    },\n    gameWon: function gameWon() {\n      if (this.safeCells === 0 && this.allMinesFlagged()) {\n        this.gameActive = false;\n        this.pauseTimer();\n        this.revealModal();\n        return true;\n      } else {\n        return false;\n      }\n    },\n    allMinesFlagged: function allMinesFlagged() {\n      for (var r = 0; r < this.rows; r++) {\n        for (var c = 0; c < this.cols; c++) {\n          if (this.board[r][c].mine && !this.board[r][c].flag) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n    allCellsActive: function allCellsActive() {\n      for (var r = 0; r < this.rows; r++) {\n        for (var c = 0; c < this.cols; c++) {\n          if (!this.board[r][c].active) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n    revealMines: function revealMines() {\n      for (var r = 0; r < this.rows; r++) {\n        for (var c = 0; c < this.cols; c++) {\n          this.$set(this.board[r][c], \"reveal\", true);\n        }\n      }\n    },\n    submitHighScore: function submitHighScore(name, time) {\n      this.highScores = this.highScores.concat({\n        name: name,\n        time: time\n      }).sort(function (a, b) {\n        return a.time - b.time;\n      });\n    },\n    revealModal: function revealModal() {\n      this.showHighScoresModal = true;\n    },\n    dismissModal: function dismissModal() {\n      this.showHighScoresModal = false;\n    },\n    handleHighScoreSave: function handleHighScoreSave() {\n      this.submitHighScore(this.newHighScoreName, this.elapsedTime);\n      this.dismissModal();\n    }\n  },\n  components: {\n    Cell: Cell\n  }\n};",{"version":3,"sources":["Board.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"board-container\">\n    <!-- Left aside -->\n    <aside class=\"details-container\">\n      <div class=\"mines-remaining\">\n        <h3>Mines Remaining: {{ mines }}</h3>\n        <h3>Safe Cells: {{ safeCells }}</h3>\n      </div>\n\n      <div class=\"reset-container\">\n        <div class=\"errors-container\">\n          <ul class=\"errors\">\n            <li v-for=\"(error, i) in errors\" :key=\"i\">{{ error }}</li>\n          </ul>\n        </div>\n\n        <!-- Rows -->\n        <label for=\"rows\">Rows</label>\n        <input v-model=\"resetRows\" name=\"reset-rows\" type=\"text\" />\n\n        <!-- Columns -->\n        <label for=\"cols\">Columns</label>\n        <input v-model=\"resetCols\" name=\"reset-cols\" type=\"text\" />\n\n        <!-- Mines -->\n        <label for=\"mines\">Mines</label>\n        <input v-model=\"resetMines\" name=\"reset-mines\" type=\"text\" />\n\n        <button @click=\"resetGame\">Reset</button>\n      </div>\n    </aside>\n\n    <!-- Board -->\n    <main class=\"gameplay-container\">\n      <h1>Minesweeper</h1>\n\n      <div v-if=\"youLost\" class=\"you-lost-container\">\n        <img src=\"../assets/lost.png\" alt=\"You Lose!\" />\n\n        <p>You Lose!</p>\n      </div>\n\n      <div v-if=\"!youLost\" class=\"timer-container\">\n        <img\n          class=\"stopwatch\"\n          src=\"../assets/stopwatch.png\"\n          alt=\"stopwatch icon\"\n        />\n        <p class=\"elapsed-time\">{{ elapsedTime }}</p>\n      </div>\n\n      <div class=\"row\" v-for=\"(row, i) in board\" :key=\"i\">\n        <div class=\"col\" v-for=\"(col, j) in row\" :key=\"j\">\n          <Cell\n            :mine=\"col.mine\"\n            :flag=\"col.flag\"\n            :active=\"col.active\"\n            :reveal=\"col.reveal\"\n            :row=\"i\"\n            :col=\"j\"\n            :border-mines=\"col.borderMines\"\n            v-on:cell-clicked=\"handleClick\"\n          />\n        </div>\n      </div>\n    </main>\n\n    <!-- High Scores -->\n    <aside class=\"high-scores-container\">\n      <h1>High Scores</h1>\n      <table v-if=\"highScores.length > 0\">\n        <tr>\n          <th>Rank</th>\n          <th>Name</th>\n          <th>Time</th>\n        </tr>\n\n        <tr\n          class=\"high-score\"\n          v-for=\"(score, index) in highScores\"\n          :key=\"index\"\n        >\n          <td>{{ index + 1 }}.</td>\n          <td>{{ score.name }}</td>\n          <td>{{ score.time }}</td>\n        </tr>\n      </table>\n    </aside>\n\n    <!-- High Score Modal -->\n    <div v-if=\"showHighScoresModal\" class=\"high-score-modal-container\">\n      <div class=\"high-score-modal\">\n        <div>\n          <h1>Winner!</h1>\n          <h3>Add your name to the High Scores List!</h3>\n          <input v-model=\"newHighScoreName\" type=\"text\" name=\"high-score\" />\n\n          <div class=\"btns-container\">\n            <button class=\"canel-high-score canel\" @click=\"this.dismissModal\">Canel</button>\n            <button class=\"save-high-score\" @click=\"this.handleHighScoreSave\">Save</button>\n          </div>\n        </div>\n      </div>\n      <div class=\"overlay\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cell from \"@/components/Cell.vue\";\nimport { clearInterval, setInterval } from \"timers\";\n\nexport default {\n  name: \"Minesweeper-Board\",\n  data: () => {\n    return {\n      board: [],\n      rows: 4,\n      cols: 4,\n      mines: 5,\n      resetRows: 4,\n      resetCols: 4,\n      resetMines: 5,\n      safeCells: 2,\n      startTime: 0,\n      elapsedTime: 0,\n      timerInterval: null,\n      gameActive: false,\n      errors: [],\n      highScores: [],\n      showHighScoresModal: false,\n      newHighScoreName: \"\",\n      youLost: false\n    };\n  },\n\n  mounted() {\n    this.generateBoard(this.rows, this.cols, this.mines);\n  },\n\n  watch: {\n    resetRows: function(newRows) {\n      if (this.validGame(newRows, this.resetCols, this.resetMines)) {\n        this.resetRows = parseInt(newRows);\n      }\n    },\n\n    resetCols: function(newCols) {\n      if (this.validGame(this.resetRows, newCols, this.resetMines)) {\n        this.resetCols = parseInt(newCols);\n      }\n    },\n\n    resetMines: function(newMines) {\n      if (this.validGame(this.resetRows, this.resetCols, newMines)) {\n        this.resetMines = parseInt(newMines);\n      }\n    }\n  },\n\n  methods: {\n    randomNum: max => {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n\n    generateBoard(rows = this.rows, cols = this.cols, mines = this.mines) {\n      if (!this.validGame(rows, cols, mines)) {\n        return false;\n      }\n\n      this.rows = rows;\n      this.cols = cols;\n      this.mines = mines;\n\n      // calculate number of cells that are not mines.\n      this.safeCells = rows * cols - mines;\n\n      // Helper function to return a list of cells that do not have a mine place in them.\n      const getAvailableCells = () => {\n        const availableCells = [];\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            if (!this.board[i][j].mine) {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n        return availableCells;\n      };\n\n      // Initialize board to entirely empty but active cells\n      for (let r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n        for (let c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            mine: false,\n            active: true,\n            borderMines: 0,\n            flag: false,\n            reveal: false\n          });\n        }\n      }\n\n      // Place mines\n      for (let m = 0; m < mines; m++) {\n        const availableCells = getAvailableCells();\n        const randomNum = this.randomNum(availableCells.length);\n        const cell = availableCells[randomNum];\n        const row = cell[0];\n        const col = cell[1];\n        this.$set(this.board[row][col], \"mine\", true);\n      }\n\n      // Determine Border Mines\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n          if (!this.board[i][j].mine) {\n            continue;\n          }\n\n          // North\n          if (i - 1 >= 0) {\n            const neighbor = this.board[i - 1][j];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // NorthEast\n          if (i - 1 >= 0 && j + 1 < cols) {\n            const neighbor = this.board[i - 1][j + 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // East\n          if (j + 1 < cols) {\n            const neighbor = this.board[i][j + 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // SouthEast\n          if (i + 1 < rows && j + 1 < cols) {\n            const neighbor = this.board[i + 1][j + 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // South\n          if (i + 1 < rows) {\n            const neighbor = this.board[i + 1][j];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // SouthWest\n          if (i + 1 < rows && j - 1 >= 0) {\n            const neighbor = this.board[i + 1][j - 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // West\n          if (j - 1 >= 0) {\n            const neighbor = this.board[i][j - 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // NorthWest\n          if (i - 1 >= 0 && j - 1 >= 0) {\n            const neighbor = this.board[i - 1][j - 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n        }\n      }\n    },\n\n    handleFlagClick(row, col) {\n      // Removing Flag\n      if (this.board[row][col].flag) {\n        this.$set(this.board[row][col], \"flag\", false);\n        this.$set(this.board[row][col], \"active\", true);\n        this.mines++;\n        return;\n      }\n\n      // Replace a number with a flag\n      if (!this.board[row][col].active) {\n        this.$set(this.board[row][col], \"flag\", true);\n        this.mines--;\n        this.safeCells++;\n        return;\n      }\n\n      this.$set(this.board[row][col], \"flag\", true);\n      this.$set(this.board[row][col], \"active\", false);\n      this.mines--;\n      this.gameWon();\n    },\n\n    handleClick(row, col, flag) {\n      console.log(\"RealDeal handleClick () => \");\n      \n      // First Click\n      if (this.allCellsActive()) {\n        console.log('realDeal firstClick!!!')\n        this.startGame();\n      }\n\n      if (flag) {\n        this.handleFlagClick(row, col);\n        return;\n      }\n\n      // this cell has already been clicked\n      if (!this.board[row][col].active) {\n        return false;\n      }\n\n      // Set Cell to Inactive\n      this.$set(this.board[row][col], \"active\", false);\n      this.safeCells--;\n\n      // Triggered a mine\n      if (this.board[row][col].mine) {\n        this.youLost = true;\n        this.gameActive = false;\n        this.revealMines();\n        this.pauseTimer();\n        return;\n      }\n\n      this.gameWon();\n    },\n\n    startGame() {\n      console.log(\"real Deal!! startGame\")\n      this.gameActive = true;\n      this.youLost = false;\n      this.startTimer();\n    },\n\n    startTimer() {\n      console.log('Real Deal Start timer')\n      this.startTime = Date.now();\n      this.timerInterval = setInterval(() => {\n        console.log('>>> SetInterval')\n        const elapsed = new Date(Date.now() - this.startTime);\n        this.elapsedTime = elapsed.getSeconds();\n        console.log(\"elapsedTime => \" + this.elapsedTime)\n      }, 1000);\n\n      return new Promise(() => {\n        setTimeout(() => {\n          Promise.resolve()\n        }, 1000)\n      })\n    },\n\n    pauseTimer() {\n      clearInterval(this.timerInterval);\n    },\n\n    resetTimer() {\n      this.startTime = 0;\n      this.elapsedTime = 0;\n      clearInterval(this.timerInterval);\n      this.startTimer();\n    },\n\n    resetGame() {\n      if (!this.validGame(this.resetRows, this.resetCols, this.resetMines)) {\n        return;\n      }\n      this.youLost = false;\n      this.elapsedTime = 0;\n      this.board = [];\n      this.generateBoard(this.resetRows, this.resetCols, this.resetMines);\n    },\n\n    validGame(rows, cols, mines) {\n      this.errors = [];\n\n      if (isNaN(rows)) {\n        this.errors.push(\"Rows is not a number.\");\n      }\n\n      if (isNaN(cols)) {\n        this.errors.push(\"Columns is not a number.\");\n      }\n\n      if (isNaN(mines)) {\n        this.errors.push(\"Mines is not a number.\");\n      }\n\n      if (mines >= rows * cols) {\n        this.errors.push(\"Mines cannot outnumber Cells.\");\n      }\n\n      if (mines <= 0) {\n        this.errors.push(\"Mines must be greater than zero.\");\n      }\n\n      if (rows <= 0) {\n        this.errors.push(\"Rows must be greater than zero.\");\n      }\n\n      if (cols <= 0) {\n        this.errors.push(\"Columns must be greater than zero.\");\n      }\n\n      return this.errors.length === 0 ? true : false;\n    },\n\n    gameWon() {\n      if (this.safeCells === 0 && this.allMinesFlagged()) {\n        this.gameActive = false;\n        this.pauseTimer();\n        this.revealModal();\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    allMinesFlagged() {\n      for (let r = 0; r < this.rows; r++) {\n        for (let c = 0; c < this.cols; c++) {\n          if (this.board[r][c].mine && !this.board[r][c].flag) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n\n    allCellsActive() {\n      for (let r = 0; r < this.rows; r++) {\n        for (let c = 0; c < this.cols; c++) {\n          if (!this.board[r][c].active) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n\n    revealMines() {\n      for (let r = 0; r < this.rows; r++) {\n        for (let c = 0; c < this.cols; c++) {\n          this.$set(this.board[r][c], \"reveal\", true);\n        }\n      }\n    },\n\n    submitHighScore(name, time) {\n      this.highScores = this.highScores\n        .concat({\n          name,\n          time\n        })\n        .sort((a, b) => a.time - b.time);\n    },\n\n    revealModal() {\n      this.showHighScoresModal = true;\n    },\n\n    dismissModal() {\n      this.showHighScoresModal = false;\n    },\n\n    handleHighScoreSave() {\n      this.submitHighScore(this.newHighScoreName, this.elapsedTime);\n      this.dismissModal();\n    }\n  },\n\n  components: {\n    Cell\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.board-container {\n  width: 75%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.details-container {\n  width: 24%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.gameplay-container {\n  width: 74%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.reset-container {\n  padding: 5% 0 10%;\n  border: 1px solid #ccc;\n\n  .errors-container {\n    ul {\n      list-style-type: none;\n    }\n\n    li {\n      text-align: left;\n      color: maroon;\n      font-weight: 400;\n      margin-bottom: 10px;\n    }\n  }\n}\n\n.you-lost-container {\n  height: 56px;\n\n  img {\n    width: 50px;\n    height: 50px;\n  }\n\n  p {\n    display: inline-block;\n    vertical-align: bottom;\n    font-size: 22px;\n    margin: 0;\n    font-weight: 400;\n    line-height: 55px;\n  }\n}\n\n.timer-container {\n  height: 56px;\n\n  .stopwatch {\n    width: 50px;\n    height: 50px;\n  }\n\n  .elapsed-time {\n    display: inline-block;\n    vertical-align: bottom;\n    font-size: 22px;\n    margin: 0;\n    font-weight: 400;\n    line-height: 55px;\n  }\n}\n.high-scores-container {\n  width: 90%;\n  min-height: 200px;\n  margin: 5% auto 5%;\n}\n\n.high-score-modal-container {\n  .high-score-modal {\n    position: fixed;\n    top: 15%;\n    left: 25%;\n    right: 25%;\n    height: 400px;\n    background-color: #fff;\n    border-radius: 5px;\n    border: 1px solid #ccc;\n    z-index: 1;\n    opacity: 1;\n  }\n\n  .btns-container {\n    width: 50%;\n    display: flex;\n    margin: 15% auto;\n  }\n\n  .overlay {\n    position: fixed;\n    top: -1%;\n    left: -1%;\n    right: -1%;\n    bottom: -1%;\n    background-color: #ddd;\n    opacity: 0.8;\n    z-index: 0;\n  }\n}\n\nbutton {\n  margin: 10% auto 5%;\n  width: 150px;\n  height: 30px;\n  background-color: aliceblue;\n  border-radius: 3px;\n  cursor: pointer;\n  font-size: 15px;\n  line-height: 15px;\n}\n\nbutton.canel {\n  background-color: transparent;\n  border: 1px solid rgb(87, 0, 0);\n}\n\nh1 {\n  margin-bottom: 1%;\n}\n\ntable {\n  width: 100%;\n  padding: 1% 2% 3%;\n}\n\nlabel {\n  display: block;\n  font-size: 18px;\n}\n\ninput[type=\"text\"] {\n  width: 50%;\n  height: 25px;\n  margin: 1% auto 5%;\n  display: block;\n  padding: 1% 2%;\n  font-size: 15px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}