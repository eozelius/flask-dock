{"remainingRequest":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js!/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ethan/vue/minesweeper/src/components/Board.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ethan/vue/minesweeper/src/components/Board.vue","mtime":1549573613986},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/Users/ethan/vue/minesweeper/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport \"core-js/modules/es6.array.fill\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _ from 'lodash';\nimport Cell from \"@/components/Cell.vue\";\nexport default {\n  name: \"Board\",\n  data: function data() {\n    return {\n      title: \"Minesweeper\",\n      board: []\n    };\n  },\n  mounted: function mounted() {\n    this.generateBoard(2, 2, 1);\n  },\n  methods: {\n    randomNum: function randomNum(max) {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n    generateBoard: function generateBoard(rows, cols, mines) {\n      var _this = this;\n\n      var getAvailableCells = function getAvailableCells() {\n        var availableCells = [];\n\n        for (var i = 0; i < rows; i++) {\n          for (var j = 0; j < cols; j++) {\n            if (_this.board[i][j].value === '_') {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n\n        return availableCells;\n      }; // Initialize board to empty\n\n\n      for (var r = 0; r < rows; r++) {\n        this.board.push(new Array(cols).fill({\n          value: \"_\",\n          active: true\n        }));\n      }\n\n      console.log('finished initializing board.');\n      console.log(this.board); // Place mines\n\n      for (var m = 0; m < 1; m++) {\n        console.log(\"[\".concat(m, \"] mines\"));\n        var availableCells = getAvailableCells();\n        console.log('availableCells');\n        console.log(availableCells);\n        console.log('number of options: ' + availableCells.length);\n        var randomCell = this.randomNum(availableCells.length);\n        console.log('randomCell => ', randomCell);\n        var selectedCell = availableCells[randomCell];\n        console.log('selected Cell => ' + _JSON$stringify(selectedCell));\n        var selectedRow = selectedCell[0];\n        console.log('selectedRow => ' + _JSON$stringify(selectedRow));\n        var selectedCol = selectedCell[1];\n        console.log('selectedCol => ' + selectedCol); // console.log(JSON.stringify(this.board[selectedRow][selectedCol]))\n        // this.board[0][0].value = 'x'\n\n        var clonedBoard = _.deepClone(this.board);\n\n        clonedBoard[0][0].value = 'x';\n        console.log(JSON.parse(_JSON$stringify(clonedBoard))); // console.log(JSON.parse(JSON.stringify(this.board)))\n        // console.log(this.board)\n        // console.log(this.board[selectedRow][selectedCol].value = \"A\")\n      }\n    },\n    handleClick: function handleClick(row, col) {\n      console.log('handleing click row: ' + row + ' col: ' + col);\n    }\n  },\n  components: {\n    Cell: Cell\n  }\n};",{"version":3,"sources":["Board.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"board-container\">\n    <h1>{{ title }}</h1>\n    <div class=\"row\" v-for=\"(row, i) in board\" :key=\"i\">\n      <div class=\"col\" v-for=\"(col, j) in row\" :key=\"j\">\n        <Cell\n          :value=\"col.value\"\n          :active=\"col.active\"\n          :row=\"i\"\n          :col=\"j\"\n          v-on:cell-clicked=\"handleClick\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport _ from 'lodash';\nimport Cell from \"@/components/Cell.vue\";\n\nexport default {\n  name: \"Board\",\n  data: () => {\n    return {\n      title: \"Minesweeper\",\n      board: []\n    };\n  },\n\n  mounted() {\n    this.generateBoard(2, 2, 1);\n  },\n\n  methods: {\n    randomNum: max => {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n\n    generateBoard(rows, cols, mines) {\n      const getAvailableCells = () => {\n        const availableCells = [];\n        for(let i = 0; i < rows; i++) {\n          for(let j = 0; j < cols; j++) {\n            if(this.board[i][j].value === '_'){\n              availableCells.push([i, j])\n            }\n          }\n        }\n        return availableCells;\n      }\n      \n      // Initialize board to empty\n      for (let r = 0; r < rows; r++) {\n        this.board.push(new Array(cols).fill({\n          value: \"_\",\n          active: true,\n        }));\n      }\n\n      console.log('finished initializing board.')\n      console.log(this.board)\n\n\n      // Place mines\n      for(let m = 0; m < 1; m++) {\n        console.log(`[${m}] mines`)\n\n        const availableCells = getAvailableCells();\n        console.log('availableCells');\n        console.log(availableCells);\n        console.log('number of options: ' + availableCells.length);\n        \n        const randomCell = this.randomNum(availableCells.length);\n        console.log('randomCell => ', randomCell)\n        \n        const selectedCell = availableCells[randomCell];\n        console.log('selected Cell => ' + JSON.stringify(selectedCell));\n\n        const selectedRow = selectedCell[0]\n        console.log('selectedRow => ' + JSON.stringify(selectedRow))\n        const selectedCol = selectedCell[1]\n        console.log('selectedCol => ' + selectedCol)\n        \n        // console.log(JSON.stringify(this.board[selectedRow][selectedCol]))\n        \n        // this.board[0][0].value = 'x'\n\n        const clonedBoard = _.deepClone(this.board);\n\n        clonedBoard[0][0].value = 'x';\n\n        console.log(JSON.parse(JSON.stringify(clonedBoard)))\n\n        // console.log(JSON.parse(JSON.stringify(this.board)))\n\n        // console.log(this.board)\n\n\n        // console.log(this.board[selectedRow][selectedCol].value = \"A\")\n      }\n    },\n\n    handleClick(row, col){\n      console.log('handleing click row: ' + row + ' col: ' + col);\n    }\n  },\n\n  components: {\n    Cell\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.board-container {\n  width: 50%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.row {\n  display: flex;\n}\n\n.col {\n  flex-grow: 1;\n}\n</style>\n"],"sourceRoot":"src/components"}]}