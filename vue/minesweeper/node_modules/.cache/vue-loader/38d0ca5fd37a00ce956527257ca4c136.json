{"remainingRequest":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ethan/vue/minesweeper/src/components/Minesweeper.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ethan/vue/minesweeper/src/components/Minesweeper.vue","mtime":1550239794496},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Board from \"@/components/Board.vue\";\nimport HighScores from \"@/components/HighScores.vue\";\nimport { clearInterval, setInterval } from \"timers\";\nimport { mapState, mapActions } from \"vuex\";\n\nexport default {\n  name: \"Minesweeper\",\n\n  data: () => {\n    return {\n      // errors: [],\n      // resetRows: 4,\n      // resetCols: 4,\n      // resetMines: 4,\n      startTime: 0,\n      elapsedTime: 0,\n      timerInterval: null,\n      showHighScoresModal: false\n\n      // gameActive: false,\n      // youLost: false\n    };\n  },\n\n  mounted() {},\n\n  computed: mapState({\n    // GameState\n    gameActive: state => state.game.gameActive,\n    youLost: state => state.game.youLost\n\n    // Board\n    // board: state => state.board.board,\n    // rows: state => state.board.rows,\n    // cols: state => state.board.cols,\n    // mines: state => state.board.mines,\n    // safeCells: state => state.board.safeCells,\n\n    // Timer\n    // startTime: state => state.timer.startTime,\n    // elapsedTime: state => state.timer.elapsedTime,\n    // timerInterval: state => state.timer.timerInterval,\n\n    // HighScores\n    // showHighScoresModal: state => state.highScores.showHighScoresModal,\n    // highScores: state => state.highScores.highScores,\n\n    // Reset Board\n    // resetRows: state => state.resetBoard.resetRows,\n    // resetCols: state => state.resetBoard.resetCols,\n    // resetMines: state => state.resetBoard.resetMines,\n    // errors: state => state.resetBoard.errors,\n  }),\n\n  watch: {\n    resetRows: function(newRows) {\n      if (this.validGame(newRows, this.resetCols, this.resetMines)) {\n        this.resetRows = parseInt(newRows);\n      }\n    },\n\n    resetCols: function(newCols) {\n      if (this.validGame(this.resetRows, newCols, this.resetMines)) {\n        this.resetCols = parseInt(newCols);\n      }\n    },\n\n    resetMines: function(newMines) {\n      if (this.validGame(this.resetRows, this.resetCols, newMines)) {\n        this.resetMines = parseInt(newMines);\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      \"startGame\",\n      \"resetGenerateBoard\",\n      \"generateBoard\",\n      \"setResetRows\"\n    ]),\n\n    handleResetRows(e) {\n      // console.log(\"handleResetRows\");\n      let resetRows = e.target.value;\n      this.myresetRows = resetRows + 1;\n      // console.log(resetRows);\n    },\n\n    handleResetCols(e) {\n      // console.log(\"handleResetCols\");\n      let resetCols = e.target.value;\n      this.myresetCols = resetCols + 1;\n      // console.log(resetCol);\n    },\n\n    // handleResetMines(e) {},\n\n    // handleFlagClick(row, col) {\n    //   // Removing Flag\n    //   if (this.board[row][col].flag) {\n    //     this.$set(this.board[row][col], \"flag\", false);\n    //     this.$set(this.board[row][col], \"active\", true);\n    //     this.mines++;\n    //     return;\n    //   }\n\n    //   // Replace a number with a flag\n    //   if (!this.board[row][col].active) {\n    //     this.$set(this.board[row][col], \"flag\", true);\n    //     this.mines--;\n    //     this.safeCells++;\n    //     return;\n    //   }\n\n    //   this.$set(this.board[row][col], \"flag\", true);\n    //   this.$set(this.board[row][col], \"active\", false);\n    //   this.mines--;\n    //   this.gameWon();\n    // },\n\n    // handleClick(row, col, flag) {\n    //   // First Click\n    //   if (this.allCellsActive()) {\n    //     this.startGame();\n    //   }\n\n    //   if (flag) {\n    //     this.handleFlagClick(row, col);\n    //     return;\n    //   }\n\n    //   // this cell has already been clicked\n    //   if (!this.board[row][col].active) {\n    //     return false;\n    //   }\n\n    //   // Set Cell to Inactive\n    //   this.$set(this.board[row][col], \"active\", false);\n    //   this.safeCells--;\n\n    //   // Triggered a mine\n    //   if (this.board[row][col].mine) {\n    //     this.youLost = true;\n    //     this.gameActive = false;\n    //     this.revealMines();\n    //     this.pauseTimer();\n    //     return;\n    //   }\n\n    //   this.gameWon();\n    // },\n\n    // startGame() {\n    //   this.gameActive = true;\n    //   this.youLost = false;\n    //   this.startTimer();\n    // },\n\n    startTimer() {\n      this.startTime = Date.now();\n      this.timerInterval = setInterval(() => {\n        const elapsed = new Date(Date.now() - this.startTime);\n        this.elapsedTime = elapsed.getSeconds();\n      }, 1000);\n    },\n\n    pauseTimer() {\n      clearInterval(this.timerInterval);\n    },\n\n    resetGame() {\n      if (!this.validGame(this.resetRows, this.resetCols, this.resetMines)) {\n        return;\n      }\n      // console.log(\"TODO => create youLost state Setter\");\n      // this.youLost = false;\n      this.elapsedTime = 0;\n      this.startTime = 0;\n      clearInterval(this.timerInterval);\n      this.board = [];\n      this.generateBoard();\n    },\n\n    validGame(rows, cols, mines) {\n      this.errors = [];\n\n      if (isNaN(rows)) {\n        this.errors.push(\"Rows is not a number.\");\n      }\n\n      if (isNaN(cols)) {\n        this.errors.push(\"Columns is not a number.\");\n      }\n\n      if (isNaN(mines)) {\n        this.errors.push(\"Mines is not a number.\");\n      }\n\n      if (mines >= rows * cols) {\n        this.errors.push(\"Mines cannot outnumber Cells.\");\n      }\n\n      if (mines <= 0) {\n        this.errors.push(\"Mines must be greater than zero.\");\n      }\n\n      if (rows <= 0) {\n        this.errors.push(\"Rows must be greater than zero.\");\n      }\n\n      if (cols <= 0) {\n        this.errors.push(\"Columns must be greater than zero.\");\n      }\n\n      return this.errors.length === 0 ? true : false;\n    },\n\n    gameWon() {\n      if (this.safeCells === 0 && this.allMinesFlagged()) {\n        this.gameActive = false;\n        this.pauseTimer();\n        this.revealModal();\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    // allMinesFlagged() {\n    //   for (let r = 0; r < this.rows; r++) {\n    //     for (let c = 0; c < this.cols; c++) {\n    //       if (this.board[r][c].mine && !this.board[r][c].flag) {\n    //         return false;\n    //       }\n    //     }\n    //   }\n    //   return true;\n    // },\n\n    // allCellsActive() {\n    //   for (let r = 0; r < this.rows; r++) {\n    //     for (let c = 0; c < this.cols; c++) {\n    //       if (!this.board[r][c].active) {\n    //         return false;\n    //       }\n    //     }\n    //   }\n    //   return true;\n    // },\n\n    // revealMines() {\n    //   for (let r = 0; r < this.rows; r++) {\n    //     for (let c = 0; c < this.cols; c++) {\n    //       this.$set(this.board[r][c], \"reveal\", true);\n    //     }\n    //   }\n    // },\n\n    revealModal() {\n      this.showHighScoresModal = true;\n    },\n\n    dismissModal() {\n      this.showHighScoresModal = false;\n    }\n  },\n\n  components: {\n    Board,\n    HighScores\n  }\n};\n",{"version":3,"sources":["Minesweeper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Minesweeper.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"board-container\">\n    <!-- Left aside -->\n    <aside class=\"details-container\">\n      <div class=\"mines-remaining\">\n        <h5>Mines Remaining: TODO get Mines</h5>\n        <h5>Safe Cells: TODO get safeCells</h5>\n      </div>\n\n      <div class=\"reset-container\">\n        <div class=\"errors-container\">\n          <ul class=\"errors\">\n            <li v-for=\"(error, i) in errors\" :key=\"i\">{{ error }}</li>\n          </ul>\n        </div>\n\n        <!-- Rows -->\n        <label for=\"rows\">Rows</label>\n        <input @input=\"handleResetRows\" name=\"reset-rows\" type=\"text\" />\n\n        <!-- Columns -->\n        <label for=\"cols\">Columns</label>\n        <input @input=\"handleResetCols\" name=\"reset-cols\" type=\"text\" />\n\n        <!-- Mines -->\n        <label for=\"mines\">Mines</label>\n        <input @input=\"handleResetMines\" name=\"reset-mines\" type=\"text\" />\n\n        <button @click=\"resetGame\">Reset</button>\n      </div>\n    </aside>\n\n    <!-- Board -->\n    <main class=\"gameplay-container\">\n      <h1>Minesweeper</h1>\n      <h3>gameActive: {{ gameActive }}</h3>\n      <h3>youLost: {{ youLost }}</h3>\n\n      <div v-if=\"youLost\" class=\"you-lost-container\">\n        <img src=\"../images/lost.png\" alt=\"You Lose!\" />\n\n        <p>You Lose!</p>\n      </div>\n\n      <div v-if=\"!youLost\" class=\"timer-container\">\n        <img\n          class=\"stopwatch\"\n          src=\"../images/stopwatch.png\"\n          alt=\"stopwatch icon\"\n        />\n        <p class=\"elapsed-time\">{{ elapsedTime }}</p>\n      </div>\n\n      <Board />\n    </main>\n\n    <HighScores\n      :show-high-scores-modal=\"showHighScoresModal\"\n      v-on:dismiss-high-scores-modal=\"dismissModal\"\n      :elapsed-time=\"elapsedTime\"\n    />\n  </div>\n</template>\n\n<script>\nimport Board from \"@/components/Board.vue\";\nimport HighScores from \"@/components/HighScores.vue\";\nimport { clearInterval, setInterval } from \"timers\";\nimport { mapState, mapActions } from \"vuex\";\n\nexport default {\n  name: \"Minesweeper\",\n\n  data: () => {\n    return {\n      // errors: [],\n      // resetRows: 4,\n      // resetCols: 4,\n      // resetMines: 4,\n      startTime: 0,\n      elapsedTime: 0,\n      timerInterval: null,\n      showHighScoresModal: false\n\n      // gameActive: false,\n      // youLost: false\n    };\n  },\n\n  mounted() {},\n\n  computed: mapState({\n    // GameState\n    gameActive: state => state.game.gameActive,\n    youLost: state => state.game.youLost\n\n    // Board\n    // board: state => state.board.board,\n    // rows: state => state.board.rows,\n    // cols: state => state.board.cols,\n    // mines: state => state.board.mines,\n    // safeCells: state => state.board.safeCells,\n\n    // Timer\n    // startTime: state => state.timer.startTime,\n    // elapsedTime: state => state.timer.elapsedTime,\n    // timerInterval: state => state.timer.timerInterval,\n\n    // HighScores\n    // showHighScoresModal: state => state.highScores.showHighScoresModal,\n    // highScores: state => state.highScores.highScores,\n\n    // Reset Board\n    // resetRows: state => state.resetBoard.resetRows,\n    // resetCols: state => state.resetBoard.resetCols,\n    // resetMines: state => state.resetBoard.resetMines,\n    // errors: state => state.resetBoard.errors,\n  }),\n\n  watch: {\n    resetRows: function(newRows) {\n      if (this.validGame(newRows, this.resetCols, this.resetMines)) {\n        this.resetRows = parseInt(newRows);\n      }\n    },\n\n    resetCols: function(newCols) {\n      if (this.validGame(this.resetRows, newCols, this.resetMines)) {\n        this.resetCols = parseInt(newCols);\n      }\n    },\n\n    resetMines: function(newMines) {\n      if (this.validGame(this.resetRows, this.resetCols, newMines)) {\n        this.resetMines = parseInt(newMines);\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions([\n      \"startGame\",\n      \"resetGenerateBoard\",\n      \"generateBoard\",\n      \"setResetRows\"\n    ]),\n\n    handleResetRows(e) {\n      // console.log(\"handleResetRows\");\n      let resetRows = e.target.value;\n      this.myresetRows = resetRows + 1;\n      // console.log(resetRows);\n    },\n\n    handleResetCols(e) {\n      // console.log(\"handleResetCols\");\n      let resetCols = e.target.value;\n      this.myresetCols = resetCols + 1;\n      // console.log(resetCol);\n    },\n\n    // handleResetMines(e) {},\n\n    // handleFlagClick(row, col) {\n    //   // Removing Flag\n    //   if (this.board[row][col].flag) {\n    //     this.$set(this.board[row][col], \"flag\", false);\n    //     this.$set(this.board[row][col], \"active\", true);\n    //     this.mines++;\n    //     return;\n    //   }\n\n    //   // Replace a number with a flag\n    //   if (!this.board[row][col].active) {\n    //     this.$set(this.board[row][col], \"flag\", true);\n    //     this.mines--;\n    //     this.safeCells++;\n    //     return;\n    //   }\n\n    //   this.$set(this.board[row][col], \"flag\", true);\n    //   this.$set(this.board[row][col], \"active\", false);\n    //   this.mines--;\n    //   this.gameWon();\n    // },\n\n    // handleClick(row, col, flag) {\n    //   // First Click\n    //   if (this.allCellsActive()) {\n    //     this.startGame();\n    //   }\n\n    //   if (flag) {\n    //     this.handleFlagClick(row, col);\n    //     return;\n    //   }\n\n    //   // this cell has already been clicked\n    //   if (!this.board[row][col].active) {\n    //     return false;\n    //   }\n\n    //   // Set Cell to Inactive\n    //   this.$set(this.board[row][col], \"active\", false);\n    //   this.safeCells--;\n\n    //   // Triggered a mine\n    //   if (this.board[row][col].mine) {\n    //     this.youLost = true;\n    //     this.gameActive = false;\n    //     this.revealMines();\n    //     this.pauseTimer();\n    //     return;\n    //   }\n\n    //   this.gameWon();\n    // },\n\n    // startGame() {\n    //   this.gameActive = true;\n    //   this.youLost = false;\n    //   this.startTimer();\n    // },\n\n    startTimer() {\n      this.startTime = Date.now();\n      this.timerInterval = setInterval(() => {\n        const elapsed = new Date(Date.now() - this.startTime);\n        this.elapsedTime = elapsed.getSeconds();\n      }, 1000);\n    },\n\n    pauseTimer() {\n      clearInterval(this.timerInterval);\n    },\n\n    resetGame() {\n      if (!this.validGame(this.resetRows, this.resetCols, this.resetMines)) {\n        return;\n      }\n      // console.log(\"TODO => create youLost state Setter\");\n      // this.youLost = false;\n      this.elapsedTime = 0;\n      this.startTime = 0;\n      clearInterval(this.timerInterval);\n      this.board = [];\n      this.generateBoard();\n    },\n\n    validGame(rows, cols, mines) {\n      this.errors = [];\n\n      if (isNaN(rows)) {\n        this.errors.push(\"Rows is not a number.\");\n      }\n\n      if (isNaN(cols)) {\n        this.errors.push(\"Columns is not a number.\");\n      }\n\n      if (isNaN(mines)) {\n        this.errors.push(\"Mines is not a number.\");\n      }\n\n      if (mines >= rows * cols) {\n        this.errors.push(\"Mines cannot outnumber Cells.\");\n      }\n\n      if (mines <= 0) {\n        this.errors.push(\"Mines must be greater than zero.\");\n      }\n\n      if (rows <= 0) {\n        this.errors.push(\"Rows must be greater than zero.\");\n      }\n\n      if (cols <= 0) {\n        this.errors.push(\"Columns must be greater than zero.\");\n      }\n\n      return this.errors.length === 0 ? true : false;\n    },\n\n    gameWon() {\n      if (this.safeCells === 0 && this.allMinesFlagged()) {\n        this.gameActive = false;\n        this.pauseTimer();\n        this.revealModal();\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    // allMinesFlagged() {\n    //   for (let r = 0; r < this.rows; r++) {\n    //     for (let c = 0; c < this.cols; c++) {\n    //       if (this.board[r][c].mine && !this.board[r][c].flag) {\n    //         return false;\n    //       }\n    //     }\n    //   }\n    //   return true;\n    // },\n\n    // allCellsActive() {\n    //   for (let r = 0; r < this.rows; r++) {\n    //     for (let c = 0; c < this.cols; c++) {\n    //       if (!this.board[r][c].active) {\n    //         return false;\n    //       }\n    //     }\n    //   }\n    //   return true;\n    // },\n\n    // revealMines() {\n    //   for (let r = 0; r < this.rows; r++) {\n    //     for (let c = 0; c < this.cols; c++) {\n    //       this.$set(this.board[r][c], \"reveal\", true);\n    //     }\n    //   }\n    // },\n\n    revealModal() {\n      this.showHighScoresModal = true;\n    },\n\n    dismissModal() {\n      this.showHighScoresModal = false;\n    }\n  },\n\n  components: {\n    Board,\n    HighScores\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../styles/reset\";\n\n.board-container {\n  width: 75%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.details-container {\n  width: 24%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.gameplay-container {\n  width: 74%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.reset-container {\n  padding: 5% 0 10%;\n  border: 1px solid #ccc;\n\n  .errors-container {\n    ul {\n      padding: 0 10%;\n    }\n\n    li {\n      text-align: center;\n      color: maroon;\n    }\n  }\n}\n\n.you-lost-container {\n  height: 56px;\n\n  img {\n    width: 50px;\n    height: 50px;\n  }\n\n  p {\n    display: inline-block;\n    vertical-align: bottom;\n    margin: 0;\n    font-weight: 400;\n    line-height: 55px;\n  }\n}\n\n.timer-container {\n  height: 56px;\n\n  .stopwatch {\n    width: 50px;\n    height: 50px;\n  }\n\n  .elapsed-time {\n    display: inline-block;\n    vertical-align: bottom;\n    margin: 0;\n    line-height: 55px;\n  }\n}\n</style>\n"]}]}