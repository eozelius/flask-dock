{"remainingRequest":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ethan/vue/minesweeper/src/components/StopWatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ethan/vue/minesweeper/src/components/StopWatch.vue","mtime":1550161681550},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"Minesweeper-Stop-Watch\",\n  data: () => {\n    return {\n      startTime: 0,\n      timerInterval: null,\n    }\n  },\n\n  props: {\n    incrementElapsedTime: {\n      type: Function,\n      default: null\n    },\n    elapsedTime: {\n      type: Number,\n      default: 0\n    },\n    shouldStartTimer: {\n      type: Boolean,\n      default: false\n    },\n    shouldPauseTimer: {\n      type: Boolean,\n      default: false\n    },\n    shouldResetTimer: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  watch: {\n    shouldStartTimer(shouldStart) {\n      console.log('typeof shouldStart');\n      console.log(typeof shouldStart)\n      \n      if (shouldStart) {\n        console.log(\"StopWatch::watch::startTimer shouldStart => \", shouldStart)\n        this.startTimer();\n      } else {\n        console.log(\"StopWatch::watch::startTimer shouldStart => \", shouldStart)        \n      }\n    },\n    shouldPauseTimer(shouldPause) {\n      console.log('typeof shouldPause');\n      console.log(typeof shouldPause)\n      \n      if (shouldPause) {\n        console.log(\"StopWatch::watch::startTimer shouldPause => \", shouldPause)\n        this.pauseTimer();\n      } else {\n        console.log(\"StopWatch::watch::startTimer shouldStart => \", shouldPause)        \n      }\n    },\n    shouldResetTimer(shouldReset) {\n      console.log('typeof shouldReset');\n      console.log(typeof shouldReset)\n\n      if (shouldReset) {\n        console.log(\"StopWatch::watch:: shouldReset => \", shouldReset)\n        this.resetTimer();\n      } else {\n        console.log(\"StopWatch::watch:: shouldReset => \", shouldReset)\n      }\n    }\n  },\n\n  methods: {\n    startTimer() {\n      this.startTime = Date.now();\n      this.timerInterval = setInterval(() => {\n        const elapsed = new Date(Date.now() - this.startTime);\n        this.incrementElapsedTime(elapsed.getSeconds());\n      }, 1000);\n    },\n\n    pauseTimer() {\n      clearInterval(this.timerInterval);\n    },\n\n    resetTimer() {\n      clearInterval(this.timerInterval);\n      this.startTime = 0;\n    }\n  }\n}\n",{"version":3,"sources":["StopWatch.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"StopWatch.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"stop-watch-component\">\n    <img\n      class=\"stopwatch\"\n      src=\"../assets/stopwatch.png\"\n      alt=\"stopwatch icon\"\n    />\n    <p class=\"elapsed-time\">{{ elapsedTime }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"Minesweeper-Stop-Watch\",\n  data: () => {\n    return {\n      startTime: 0,\n      timerInterval: null,\n    }\n  },\n\n  props: {\n    incrementElapsedTime: {\n      type: Function,\n      default: null\n    },\n    elapsedTime: {\n      type: Number,\n      default: 0\n    },\n    shouldStartTimer: {\n      type: Boolean,\n      default: false\n    },\n    shouldPauseTimer: {\n      type: Boolean,\n      default: false\n    },\n    shouldResetTimer: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  watch: {\n    shouldStartTimer(shouldStart) {\n      console.log('typeof shouldStart');\n      console.log(typeof shouldStart)\n      \n      if (shouldStart) {\n        console.log(\"StopWatch::watch::startTimer shouldStart => \", shouldStart)\n        this.startTimer();\n      } else {\n        console.log(\"StopWatch::watch::startTimer shouldStart => \", shouldStart)        \n      }\n    },\n    shouldPauseTimer(shouldPause) {\n      console.log('typeof shouldPause');\n      console.log(typeof shouldPause)\n      \n      if (shouldPause) {\n        console.log(\"StopWatch::watch::startTimer shouldPause => \", shouldPause)\n        this.pauseTimer();\n      } else {\n        console.log(\"StopWatch::watch::startTimer shouldStart => \", shouldPause)        \n      }\n    },\n    shouldResetTimer(shouldReset) {\n      console.log('typeof shouldReset');\n      console.log(typeof shouldReset)\n\n      if (shouldReset) {\n        console.log(\"StopWatch::watch:: shouldReset => \", shouldReset)\n        this.resetTimer();\n      } else {\n        console.log(\"StopWatch::watch:: shouldReset => \", shouldReset)\n      }\n    }\n  },\n\n  methods: {\n    startTimer() {\n      this.startTime = Date.now();\n      this.timerInterval = setInterval(() => {\n        const elapsed = new Date(Date.now() - this.startTime);\n        this.incrementElapsedTime(elapsed.getSeconds());\n      }, 1000);\n    },\n\n    pauseTimer() {\n      clearInterval(this.timerInterval);\n    },\n\n    resetTimer() {\n      clearInterval(this.timerInterval);\n      this.startTime = 0;\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../styles/reset\";\n\n#stop-watch-component {\n  height: 56px;\n\n  .stopwatch {\n    width: 50px;\n    height: 50px;\n  }\n\n  .elapsed-time {\n    display: inline-block;\n    vertical-align: bottom;\n    margin: 0;\n    line-height: 55px;\n  }\n}\n\n</style>\n"]}]}