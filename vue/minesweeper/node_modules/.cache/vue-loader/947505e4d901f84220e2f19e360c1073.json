{"remainingRequest":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ethan/vue/minesweeper/src/components/Board.vue?vue&type=style&index=0&id=e1ee1034&lang=scss&scoped=true&","dependencies":[{"path":"/Users/ethan/vue/minesweeper/src/components/Board.vue","mtime":1549673372737},{"path":"/Users/ethan/vue/minesweeper/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.board-container {\n  width: 75%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.details-container {\n  width: 24%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.gameplay-container {\n  width: 74%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.row {\n  display: flex;\n}\n\n.col {\n  flex-grow: 1;\n}\n\n.reset-container {\n  padding: 0 0 5%;\n\n  label {\n    display: block;\n    font-size: 18px;\n  }\n\n  input[type=\"text\"] {\n    width: 50%;\n    height: 25px;\n    margin: 1% auto 5%;\n    display: block;\n    padding: 1% 2%;\n    font-size: 15px;\n  }\n\n  button {\n    margin: 10% auto 5%;\n    width: 150px;\n    height: 30px;\n    background-color: aliceblue;\n    border-radius: 3px;\n    cursor: pointer;\n    font-size: 15px;\n    line-height: 15px;\n  }\n\n  .errors-container {\n    ul {\n      list-style-type: none;\n    }\n\n    li {\n      text-align: left;\n      color: maroon;\n      font-weight: 400;\n      margin-bottom: 10px;\n    }\n  }\n}\n",{"version":3,"sources":["Board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Board.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"board-container\">\n    <div class=\"details-container\">\n      <div class=\"mines-remaining\">\n        <h3>Mines Remaining: {{ mines }}</h3>\n      </div>\n\n      <div class=\"reset-container\">\n        <div class=\"errors-container\">\n          <ul class=\"errors\">\n            <li v-for=\"(error, i) in errors\" :key=\"i\">{{ error }}</li>\n          </ul>\n        </div>\n\n        <!-- Rows -->\n        <label for=\"rows\">Rows</label>\n        <input v-model=\"rows\" name=\"cols\" type=\"text\" />\n\n        <!-- Columns -->\n        <label for=\"cols\">Columns</label>\n        <input v-model=\"cols\" name=\"rows\" type=\"text\" />\n\n        <!-- Mines -->\n        <label for=\"mines\">Mines</label>\n        <input v-model=\"mines\" name=\"mines\" type=\"text\" />\n\n        <button @click=\"resetGame\">Reset</button>\n      </div>\n    </div>\n\n    <div class=\"gameplay-container\">\n      <h1>{{ title }}</h1>\n      <div class=\"row\" v-for=\"(row, i) in board\" :key=\"i\">\n        <div class=\"col\" v-for=\"(col, j) in row\" :key=\"j\">\n          <Cell\n            :value=\"col.value\"\n            :active=\"col.active\"\n            :row=\"i\"\n            :col=\"j\"\n            v-on:cell-clicked=\"handleClick\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cell from \"@/components/Cell.vue\";\n\nexport default {\n  name: \"Board\",\n  data: () => {\n    return {\n      title: \"Minesweeper\",\n      board: [],\n      rows: 3,\n      cols: 3,\n      mines: 5,\n      safeCells: 20,\n      errors: []\n    };\n  },\n\n  mounted() {\n    this.generateBoard(this.rows, this.cols, this.mines);\n  },\n\n  methods: {\n    randomNum: max => {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n\n    generateBoard(rows = this.rows, cols = this.cols, mines = this.mines) {\n      if (!this.validGame()) {\n        return;\n      }\n\n      this.safeCells = rows * cols - mines;\n\n      const getAvailableCells = () => {\n        const availableCells = [];\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            if (this.board[i][j].value === \"_\") {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n        return availableCells;\n      };\n\n      // Initialize board to entirely empty but active cells\n      for (let r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n        for (let c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            value: \"_\",\n            active: true\n          });\n        }\n      }\n\n      // Place mines\n      for (let m = 0; m < mines; m++) {\n        const availableCells = getAvailableCells();\n        const randomNum = this.randomNum(availableCells.length);\n        const cell = availableCells[randomNum];\n        const row = cell[0];\n        const col = cell[1];\n        this.$set(this.board[row][col], \"value\", \"x\");\n      }\n    },\n\n    handleClick(row, col) {\n      // this cell has already been clicked\n      if (this.board[row][col].active === false) {\n        return false;\n      } else {\n        this.$set(this.board[row][col], \"active\", false);\n      }\n\n      // Triggered a mine\n      if (this.board[row][col].value === \"x\") {\n        alert(\"you lose!!\");\n        this.resetGame();\n      } else {\n        this.safeCells--;\n      }\n\n      // Game won?\n      if (this.safeCells === 0) {\n        alert(\"you will!!\");\n        this.resetGame();\n      }\n    },\n\n    resetGame() {\n      if (!this.validGame()) {\n        return;\n      }\n      this.board = [];\n      this.generateBoard(this.rows, this.col, this.mines);\n    },\n\n    validGame() {\n      this.errors = [];\n\n      if (this.mines >= this.rows * this.cols) {\n        this.errors.push(\"Error: Mines cannot outnumber Cells.\");\n      }\n\n      if (this.rows <= 0) {\n        this.errors.push(\"Error: Rows must be greater than zero.\");\n      }\n\n      if (this.cols <= 0) {\n        this.errors.push(\"Error: Columns must be greater than zero.\");\n      }\n\n      return this.errors.length === 0 ? true : false;\n    }\n  },\n\n  components: {\n    Cell\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.board-container {\n  width: 75%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.details-container {\n  width: 24%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.gameplay-container {\n  width: 74%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.row {\n  display: flex;\n}\n\n.col {\n  flex-grow: 1;\n}\n\n.reset-container {\n  padding: 0 0 5%;\n\n  label {\n    display: block;\n    font-size: 18px;\n  }\n\n  input[type=\"text\"] {\n    width: 50%;\n    height: 25px;\n    margin: 1% auto 5%;\n    display: block;\n    padding: 1% 2%;\n    font-size: 15px;\n  }\n\n  button {\n    margin: 10% auto 5%;\n    width: 150px;\n    height: 30px;\n    background-color: aliceblue;\n    border-radius: 3px;\n    cursor: pointer;\n    font-size: 15px;\n    line-height: 15px;\n  }\n\n  .errors-container {\n    ul {\n      list-style-type: none;\n    }\n\n    li {\n      text-align: left;\n      color: maroon;\n      font-weight: 400;\n      margin-bottom: 10px;\n    }\n  }\n}\n</style>\n"]}]}