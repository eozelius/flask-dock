{"remainingRequest":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ethan/vue/minesweeper/src/components/Board.vue?vue&type=style&index=0&id=e1ee1034&lang=scss&scoped=true&","dependencies":[{"path":"/Users/ethan/vue/minesweeper/src/components/Board.vue","mtime":1550600720709},{"path":"/Users/ethan/vue/minesweeper/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/ethan/vue/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ethan/vue/minesweeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"../styles/reset\";\n\n.board-container {\n  width: 75%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.details-container {\n  width: 24%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.gameplay-container {\n  width: 74%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.reset-container {\n  padding: 5% 0 10%;\n  border: 1px solid #ccc;\n\n  .errors-container {\n    ul {\n      padding: 0 10%;\n    }\n\n    li {\n      text-align: center;\n      color: maroon;\n    }\n  }\n}\n\n.you-lost-container {\n  height: 56px;\n\n  img {\n    width: 50px;\n    height: 50px;\n  }\n\n  p {\n    display: inline-block;\n    vertical-align: bottom;\n    margin: 0;\n    font-weight: 400;\n    line-height: 55px;\n  }\n}\n\n.timer-container {\n  height: 56px;\n\n  .stopwatch {\n    width: 50px;\n    height: 50px;\n  }\n\n  .elapsed-time {\n    display: inline-block;\n    vertical-align: bottom;\n    margin: 0;\n    line-height: 55px;\n  }\n}\n",{"version":3,"sources":["Board.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4aA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Board.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"board-container\">\n    <!-- Left aside -->\n    <aside class=\"details-container\">\n      <div class=\"mines-remaining\">\n        <h5>\n          Mines Remaining: <span class=\"mines\">{{ mines }}</span>\n        </h5>\n        <h5>\n          Safe Cells: <span class=\"safe-cells\">{{ safeCells }}</span>\n        </h5>\n      </div>\n\n      <div class=\"reset-container\">\n        <div class=\"errors-container\">\n          <ul class=\"errors\">\n            <li v-for=\"(error, i) in errors\" :key=\"i\">{{ error }}</li>\n          </ul>\n        </div>\n\n        <!-- Rows -->\n        <label for=\"rows\">Rows</label>\n        <input v-model=\"resetRows\" name=\"reset-rows\" type=\"text\" />\n\n        <!-- Columns -->\n        <label for=\"cols\">Columns</label>\n        <input v-model=\"resetCols\" name=\"reset-cols\" type=\"text\" />\n\n        <!-- Mines -->\n        <label for=\"mines\">Mines</label>\n        <input v-model=\"resetMines\" name=\"reset-mines\" type=\"text\" />\n\n        <button @click=\"resetGame\">Reset</button>\n      </div>\n    </aside>\n\n    <!-- Board -->\n    <main class=\"gameplay-container\">\n      <h1>Minesweeper</h1>\n\n      <div v-if=\"youLost\" class=\"you-lost-container\">\n        <img src=\"../images/lost.png\" alt=\"You Lose!\" />\n\n        <p>You Lose!</p>\n      </div>\n\n      <div v-if=\"!youLost\" class=\"timer-container\">\n        <img\n          class=\"stopwatch\"\n          src=\"../images/stopwatch.png\"\n          alt=\"stopwatch icon\"\n        />\n        <p class=\"elapsed-time\">{{ elapsedTime }}</p>\n      </div>\n\n      <div class=\"row\" v-for=\"(row, i) in board\" :key=\"i\">\n        <div class=\"col\" v-for=\"(col, j) in row\" :key=\"j\">\n          <Cell\n            :mine=\"col.mine\"\n            :flag=\"col.flag\"\n            :active=\"col.active\"\n            :reveal=\"col.reveal\"\n            :row=\"i\"\n            :col=\"j\"\n            :border-mines=\"col.borderMines\"\n            v-on:cell-clicked=\"handleClick\"\n          />\n        </div>\n      </div>\n    </main>\n\n    <HighScores\n      :show-high-scores-modal=\"showHighScoresModal\"\n      v-on:dismiss-high-scores-modal=\"dismissModal\"\n      :elapsed-time=\"elapsedTime\"\n    />\n  </div>\n</template>\n\n<script>\nimport Cell from \"@/components/Cell.vue\";\nimport HighScores from \"@/components/HighScores.vue\";\nimport { clearInterval, setInterval } from \"timers\";\n\nexport default {\n  name: \"Minesweeper-Board\",\n  data: () => {\n    return {\n      board: [],\n      rows: 4,\n      cols: 4,\n      mines: 5,\n      resetRows: 4,\n      resetCols: 4,\n      resetMines: 5,\n      safeCells: 2,\n      startTime: 0,\n      elapsedTime: 0,\n      timerInterval: null,\n      gameActive: false,\n      errors: [],\n      showHighScoresModal: false,\n      youLost: false\n    };\n  },\n\n  mounted() {\n    this.generateBoard(this.rows, this.cols, this.mines);\n  },\n\n  watch: {\n    resetRows: function(newRows) {\n      if (this.validGame(newRows, this.resetCols, this.resetMines)) {\n        this.resetRows = parseInt(newRows);\n      }\n    },\n\n    resetCols: function(newCols) {\n      if (this.validGame(this.resetRows, newCols, this.resetMines)) {\n        this.resetCols = parseInt(newCols);\n      }\n    },\n\n    resetMines: function(newMines) {\n      if (this.validGame(this.resetRows, this.resetCols, newMines)) {\n        this.resetMines = parseInt(newMines);\n      }\n    }\n  },\n\n  methods: {\n    randomNum: max => {\n      // return a random number between 0 and max inclusively\n      return Math.floor(Math.random() * Math.floor(max));\n    },\n\n    generateBoard(rows = this.rows, cols = this.cols, mines = this.mines) {\n      if (!this.validGame(rows, cols, mines)) {\n        return false;\n      }\n\n      this.rows = rows;\n      this.cols = cols;\n      this.mines = mines;\n\n      // calculate number of cells that are not mines.\n      this.safeCells = rows * cols - mines;\n\n      // Helper function to return a list of cells that do not have a mine place in them.\n      const getAvailableCells = () => {\n        const availableCells = [];\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            if (!this.board[i][j].mine) {\n              availableCells.push([i, j]);\n            }\n          }\n        }\n        return availableCells;\n      };\n\n      // Initialize board to entirely empty but active cells\n      for (let r = 0; r < rows; r++) {\n        this.$set(this.board, r, []);\n        for (let c = 0; c < cols; c++) {\n          this.$set(this.board[r], c, {\n            mine: false,\n            active: true,\n            borderMines: 0,\n            flag: false,\n            reveal: false\n          });\n        }\n      }\n\n      // Place mines\n      for (let m = 0; m < mines; m++) {\n        const availableCells = getAvailableCells();\n        const randomNum = this.randomNum(availableCells.length);\n        const cell = availableCells[randomNum];\n        const row = cell[0];\n        const col = cell[1];\n        this.$set(this.board[row][col], \"mine\", true);\n      }\n\n      // Determine Border Mines\n      for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n          if (!this.board[i][j].mine) {\n            continue;\n          }\n\n          // North\n          if (i - 1 >= 0) {\n            const neighbor = this.board[i - 1][j];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // NorthEast\n          if (i - 1 >= 0 && j + 1 < cols) {\n            const neighbor = this.board[i - 1][j + 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // East\n          if (j + 1 < cols) {\n            const neighbor = this.board[i][j + 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // SouthEast\n          if (i + 1 < rows && j + 1 < cols) {\n            const neighbor = this.board[i + 1][j + 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // South\n          if (i + 1 < rows) {\n            const neighbor = this.board[i + 1][j];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // SouthWest\n          if (i + 1 < rows && j - 1 >= 0) {\n            const neighbor = this.board[i + 1][j - 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // West\n          if (j - 1 >= 0) {\n            const neighbor = this.board[i][j - 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n\n          // NorthWest\n          if (i - 1 >= 0 && j - 1 >= 0) {\n            const neighbor = this.board[i - 1][j - 1];\n            const mines = neighbor.borderMines + 1;\n            this.$set(neighbor, \"borderMines\", mines);\n          }\n        }\n      }\n    },\n\n    handleFlagClick(row, col) {\n      // Removing Flag\n      if (this.board[row][col].flag) {\n        this.$set(this.board[row][col], \"flag\", false);\n        this.$set(this.board[row][col], \"active\", true);\n        this.mines++;\n        return;\n      }\n\n      // Replace a number with a flag\n      if (!this.board[row][col].active) {\n        this.$set(this.board[row][col], \"flag\", true);\n        this.mines--;\n        this.safeCells++;\n        return;\n      }\n\n      this.$set(this.board[row][col], \"flag\", true);\n      this.$set(this.board[row][col], \"active\", false);\n      this.mines--;\n      this.gameWon();\n    },\n\n    handleClick(row, col, flag) {\n      // First Click\n      if (this.allCellsActive()) {\n        this.startGame();\n      }\n\n      if (flag) {\n        this.handleFlagClick(row, col);\n        return;\n      }\n\n      // this cell has already been clicked\n      if (!this.board[row][col].active) {\n        return false;\n      }\n\n      // Set Cell to Inactive\n      this.$set(this.board[row][col], \"active\", false);\n      this.safeCells--;\n\n      // Triggered a mine\n      if (this.board[row][col].mine) {\n        this.youLost = true;\n        this.gameActive = false;\n        this.revealMines();\n        this.pauseTimer();\n        return;\n      }\n\n      this.gameWon();\n    },\n\n    startGame() {\n      this.gameActive = true;\n      this.youLost = false;\n      this.startTimer();\n    },\n\n    startTimer() {\n      this.startTime = Date.now();\n      this.timerInterval = setInterval(() => {\n        const elapsed = new Date(Date.now() - this.startTime);\n        this.elapsedTime = elapsed.getSeconds();\n      }, 1000);\n    },\n\n    pauseTimer() {\n      clearInterval(this.timerInterval);\n    },\n\n    resetGame() {\n      if (!this.validGame(this.resetRows, this.resetCols, this.resetMines)) {\n        return;\n      }\n      this.youLost = false;\n      this.elapsedTime = 0;\n      this.startTime = 0;\n      clearInterval(this.timerInterval);\n      this.board = [];\n      this.generateBoard(this.resetRows, this.resetCols, this.resetMines);\n    },\n\n    validGame(rows = this.rows, cols = this.cols, mines = this.mines) {\n      this.errors = [];\n\n      if (isNaN(rows)) {\n        this.errors.push(\"Rows is not a number.\");\n      }\n\n      if (isNaN(cols)) {\n        this.errors.push(\"Columns is not a number.\");\n      }\n\n      if (isNaN(mines)) {\n        this.errors.push(\"Mines is not a number.\");\n      }\n\n      if (mines >= rows * cols) {\n        this.errors.push(\"Mines cannot outnumber Cells.\");\n      }\n\n      if (mines <= 0) {\n        this.errors.push(\"Mines must be greater than zero.\");\n      }\n\n      if (rows <= 0) {\n        this.errors.push(\"Rows must be greater than zero.\");\n      }\n\n      if (cols <= 0) {\n        this.errors.push(\"Columns must be greater than zero.\");\n      }\n\n      return this.errors.length === 0 ? true : false;\n    },\n\n    gameWon() {\n      if (this.safeCells === 0 && this.allMinesFlagged()) {\n        this.gameActive = false;\n        this.pauseTimer();\n        this.revealModal();\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    allMinesFlagged() {\n      for (let r = 0; r < this.rows; r++) {\n        for (let c = 0; c < this.cols; c++) {\n          if (this.board[r][c].mine && !this.board[r][c].flag) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n\n    allCellsActive() {\n      for (let r = 0; r < this.rows; r++) {\n        for (let c = 0; c < this.cols; c++) {\n          if (!this.board[r][c].active) {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n\n    revealMines() {\n      for (let r = 0; r < this.rows; r++) {\n        for (let c = 0; c < this.cols; c++) {\n          this.$set(this.board[r][c], \"reveal\", true);\n        }\n      }\n    },\n\n    revealModal() {\n      this.showHighScoresModal = true;\n    },\n\n    dismissModal() {\n      this.showHighScoresModal = false;\n    }\n  },\n\n  components: {\n    Cell,\n    HighScores\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../styles/reset\";\n\n.board-container {\n  width: 75%;\n  border: 1px solid #ccc;\n  margin: 3% auto 5%;\n  padding: 1% 2% 5%;\n}\n\n.details-container {\n  width: 24%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.gameplay-container {\n  width: 74%;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n}\n\n.reset-container {\n  padding: 5% 0 10%;\n  border: 1px solid #ccc;\n\n  .errors-container {\n    ul {\n      padding: 0 10%;\n    }\n\n    li {\n      text-align: center;\n      color: maroon;\n    }\n  }\n}\n\n.you-lost-container {\n  height: 56px;\n\n  img {\n    width: 50px;\n    height: 50px;\n  }\n\n  p {\n    display: inline-block;\n    vertical-align: bottom;\n    margin: 0;\n    font-weight: 400;\n    line-height: 55px;\n  }\n}\n\n.timer-container {\n  height: 56px;\n\n  .stopwatch {\n    width: 50px;\n    height: 50px;\n  }\n\n  .elapsed-time {\n    display: inline-block;\n    vertical-align: bottom;\n    margin: 0;\n    line-height: 55px;\n  }\n}\n</style>\n"]}]}